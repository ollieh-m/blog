<% # View for article Custom Error Handling With Turbo with view ID 07092021204849_e56e1feb26 %>

<%= title article.title %>

<%= para do %>
  Turbo will be a default part of Rails from Rails 7, replacing <%= link_to "Turbolinks", "https://github.com/turbolinks/turbolinks" %> and <%= link_to "rails-ujs", "https://github.com/rails/rails/tree/main/actionview/app/assets/javascripts" %>. This post is a result of time I spent digging into Turbo, in particular its implications for forms that don't seem to fit what Turbo is designed for: that is, forms that don't necessarily (or only) trigger a redirect or DOM changes. I don't have a definitive answer for what we <%= italic "should" %> do in these cases, but I'll explain some options that might be useful if or when Turbo's constraints feel a bit awkward.
<% end %>

<%= subtitle do %>
  Introducing Turbo...
<% end %>

<%= para do %>
  Most of this post is about <%= link_to "Turbo Drive","https://turbo.hotwired.dev/handbook/drive" %>, one of the four techniques that together constitute <%= link_to "Turbo", "https://turbo.hotwired.dev" %>. 
<% end %>

<%= para do %>
  Turbo Drive is the bit that intercepts link clicks and form submissions to avoid full page reloads. It’s the new incarnation of <%= link_to "Turbolinks", "https://github.com/turbolinks/turbolinks" %>, which has been a default part of Rails apps for a long time. Turbolinks only intercepted link clicks, not form submissions - but now, if you have Turbo installed, a form without any data attributes will automatically be handled and ultimately submitted by <%= link_to "Turbo’s javascript", "https://github.com/hotwired/turbo/blob/efbad251b3a08efb6db61d33b6114c4b45da36b6/src/observers/form_submit_observer.ts#L16"%>. This means form submissions are by default ajax requests, which don’t result in a full page load when the browser gets a response.
<% end %>

<%= para do %>
  So what does happen with the response after Turbo submits a form?
<% end %>

<%= para do %>
  a) If the response is a redirect, Turbo will follow that redirect, navigating to the new page (without a full page load) as if the user had clicked a link. This is equivalent to the <%= link_to "redirect support", "https://github.com/turbolinks/turbolinks-rails/blob/master/lib/turbolinks/redirection.rb" %> in Turbolinks-Rails when a form is submitted as an ajax request - in other words, we did have a way pre-Turbo to submit a form and redirect without a full page load. 
<% end %>

<%= para do %>
  b) If the response is <%= inline_code "html" %> and the status is 4XX or 5XX, Turbo will render that <%= inline_code "html" %> (without changing the URL). Turbolinks-Rails didn’t do this. Previously, if a <%= inline_code "POST" %> request returned some <%= inline_code "html" %>, nothing would happen without custom javascript to swap that <%= inline_code "html" %> into the page or simulate a Turbolinks visit. 
<% end %>

<%= para do %>
  c) If the response is a 'Turbo Stream' response, Turbo will process it... A what? Turbo Streams are a new kind of response. Their content-type header is <%= inline_code "text/vnd.turbo-stream.html" %> and they contain one or more Turbo Stream elements, which are custom <%= inline_code "html" %> elements. Turbo automatically appends these elements to the DOM and whenever such an element is added, it triggers DOM changes (such as appending or replacing or removing <%= inline_code "html" %>) as specified by the markup in the Turbo Stream element.
<% end %>

<%= para do %>
  Those three alternatives are the <%= italic "only" %> things Turbo is designed to do after a form is submitted: 
  <%= list do %>
    a) follow a redirect, 
    b) render <%= inline_code "html" %> if the <%= inline_code "http" %> status is 4XX or 5XX, or 
    c) process Turbo Streams, which can trigger only a limited range of DOM changes
  <% end %>
<% end %>

<%= subtitle do %>
  Doing what Turbo isn't designed for...
<% end %>

<%= para do %>
  These constraints are deliberate and there's no reason to debate them. But it is important to understand them and what they mean in practice. If we want to do something Turbo <%= italic "isn’t" %> really designed for, what should we do? What <%= italic "can" %> we do?
<% end %>

<%= para do %>
  I was learning about Turbo soon after implementing a checkout flow in <%= link_to "Cookpad", "https://cookpad.com" %> using <%= link_to "stripe js", "https://stripe.com/docs/js" %>. It works by creating a Payment Method in Stripe, then submitting the Payment Method’s <%= inline_code "id" %> in a form to our server. If all goes well processing the purchase, the user is redirected to a success page. But the purchase might fail because the user needs to authorise the payment with their bank. In that scenario, our server returns the data needed to call stripe's <%= link_to "confirmCardPayment", "https://stripe.com/docs/js/payment_intents/confirm_card_payment" %> function. And that function launches the authorisation flow for the user’s bank.<sup><%= link_to "1", "#note-1" %></sup>
<% end %>

<%= para do %>
  Calling javascript functions using data returned by the server doesn’t feel like one of the Three Things Turbo is designed to do after submitting a form. So as I read about Turbo, I kept asking myself this: what if we need (or want) to do something else? Or, being a bit more specific:
<% end %>

<span id="the-question"></span>
<%= quote do %>
  With Turbo set up, (how) can we submit a form then handle the response - in particular an error response - in a custom way, without only redirecting or inserting and/or removing some html?
<% end %>

<%= subtitle do %>
  Option 1...
<% end %>

<%= para do %>
  One option is to use Turbo up to a point, then, at that point, take over from it. Let Turbo submit the request, let Turbo handle a redirect, but prevent Turbo handling the response if, instead of rendering <%= inline_code "html" %> or appending Turbo Stream elements, we want to do “other stuff” like call some javascript functions. 
<% end %>

<%= para do %>
  This is doable by listening for the <%= inline_code "turbo:before-fetch-response" %> event, emitted on the <%= inline_code "document" %> after the request has been made but before the response has been used.
<% end %> 

<%= para do %>
  We can put this stimulus action on a form:
  <%= code language: :erb do %>
    <form data-action="turbo:before-fetch-response@document->prevent-default#preventDefault">
      ...
    </form>
  <% end %>
<% end %>

<%= para do %>
  Then define <%= inline_code "preventDefault" %> in a <%= inline_code "prevent-default" %> stimulus controller:
  <%= code language: :js do %>
    export default class extends Controller {
      // Let Turbo make the request.
      // Check the response. If it's unsuccessful, stop Turbo attempting to handle the response.

      async preventDefault(event) {
        // The response is available here and we can block Turbo's default behaviour.
        if (!event.detail.fetchResponse.succeeded) {
          event.preventDefault()

          const json = await event.detail.fetchResponse.response.clone().json()
          console.log("Do stuff with the json...", json)
        }
      }
    }
  <% end %>
<% end %>

<%= para do %>
  Now, if the server responds with an error, we can do whatever we want. See how the response doesn't even have to be <%= inline_code "html" %>. 
<% end %>

<%= para do %>
  But there's a problem. Because the event target is <%= inline_code "document" %>, I couldn’t find a nice way to be sure it corresponds to the correct form on the page. We could check the URL the request was sent to, or we could put a DOM identifier in the response, but neither is ideal. If the target was the element that triggered the request, we could listen for the event on the specific form we want to handle. That would be a convenient way to let Turbo make the request then optionally 'take over' when the response is ready.<sup><%= link_to "2", "#note-2" %></sup>
<% end %>

<%= subtitle do %>
  Option 2a...
<% end %>

<%= para do %>
  Another option is to trigger the 'other stuff' (the stuff that isn’t inserting and/or removing <%= inline_code "html" %>) <%= italic "by" %> inserting some <%= inline_code "html" %>. 
<% end %>

<%= para do %>
  For example, if we want to trigger stripe’s card authorisation flow, we can return a Turbo Stream element that appends a block of <%= inline_code "html" %> that attaches a stimulus controller that triggers the card authorisation flow.
<% end %>

<%= para do %>
  The Turbo Stream element could be rendered like this:
  <%= code language: :erb do %>
    <%%= turbo_stream.update "stripe-authentication-container" do %>
      <%%= render "shared/payment/authentication",
        client_secret: error_payload[:data][:client_secret],
        payment_method_id: error_payload[:data][:payment_method_id] %>
    <%% end %>
  <% end %>
  When it's added to the DOM, it will update the contents of the <%= inline_code "stripe-authentication-container" %> with an authentication partial.
<% end %>

<%= para do %>
  The authentication partial could look like this:
  <%= code language: :erb do %>
    <div
      data-controller="stripe-authentication"
      data-stripe-authentication-public-key-value="<%%= Rails.configuration.x.stripe.public_key %>"
      data-stripe-authentication-client-secret-value="<%%= client_secret %>"
      data-stripe-authentication-payment-method-id-value="<%%= payment_method_id %>">
    </div>
  <% end %>
<% end %>

<%= para do %>
  And the stimulus controller's connect function could look like this:
  <%= code language: :js do %>
    async connect() {
      this.stripe = await loadStripe(this.publicKeyValue)

      const result = await this.stripe.confirmCardPayment(this.clientSecretValue, {
        payment_method: this.paymentMethodIdValue,
      })

      // ...handle the result by showing errors or sending another request to fulfil the purchase
    }
  <% end %>
<% end %>

<%= para do %>
  I think using a Turbo Stream to insert <%= inline_code "html" %> as a way to do other things - things that <%= italic "could" %> be done without inserting <%= inline_code "html" %> at all - is in line with what the Turbo docs advocate <%= link_to "here", "https://turbo.hotwired.dev/handbook/streams" %>: 
<% end %>

<%= quote do %>
  Turbo Streams consciously restricts you to seven actions: append, prepend, (insert) before, (insert) after, replace, update, and remove. If you want to trigger additional behavior when these actions are carried out, you should attach behavior using Stimulus controllers.
<% end %>

<%= subtitle do %>
  Option 2b...
<% end %>

<%= para do %>
  In the above example, the 'other behaviour' is triggered when a stimulus controller connects, which happens when an element is added to the DOM. In that sense, the additional behaviour is triggered by the DOM change.
<% end %>

<%= para do %>
  But we could also use a Turbo Stream to trigger behaviour in a more roundabout way: the Turbo Stream could cause a stimulus controller (A) to connect, which could emit an event, which we could listen for in some other stimulus controller (B). Stimulus controller B would then perform the action not because it has just connected, making the resulting behaviour a bit more removed from the thing the Turbo Stream is designed for: making a DOM change. 
<% end %>

<%= para do %>
  We could render a Turbo Stream like this:
  <%= code language: :erb do %>
    <%%= turb_stream.append "form" do %>
      <div data-controller="pass-error" data-pass-error-payload-value="<%%= @object.errors.to_json %>"></div>
    <%% end %>
  <% end %>
<% end %>

<%= para do %>
  The 'pass-error' stimulus controller could connect like this:
  <%= code language: :js do %>
    connect() {
      this.element.dispatchEvent(
        new CustomEvent("error", { bubbles: true, detail: { payload: this.payloadValue }})
      )

      this.element.remove()
    }
  <% end %>
<% end %>

<%= para do %>
  And we could listen for the custom error event in the same way we can listen for <%= inline_code "rails-ujs" %> <%= inline_code "ajax:error" %> events:
  <%= code language: :erb do %>
    <form data-action="error->error-handler#handleError">
      ...
    </form>
  <% end %>
<% end %>

<%= para do %>
  This effectively means using a Turbo Stream to simulate the standard way we (at Cookpad) <%= italic "currently" %> handle a response payload. It feels a bit like hacking Turbo Streams to let us handle non-<%= inline_code "html" %> responses, and isn't really in the spirit of Turbo… but it could be useful, especially if you want to switch to Turbo but continue acting on events similar to <%= inline_code "ajax:error" %>. 
<% end %>

<%= subtitle do %>
  Option 3...
<% end %>

<%= para do %>
  Finally, even with Turbo installed (and Turbolinks removed), we don’t <%= italic "have" %> to use it. We can disable Turbo on an individual form by adding a <%= inline_code "data-turbo=false" %> attribute. This will result in a standard non-ajax form submission. Or we can add a <%= inline_code "data-remote=true" %> attribute to the form. As long as we still have <%= inline_code "rails-ujs" %> installed, the 'data-remote' attribute will stop Turbo handling the submission because <%= inline_code "rails-ujs" %> will intercept it first.
<% end %>

<%= para do %>
  This is definitely a way to have Turbo set up while handling a form response in ways Turbo isn't designed for. Submit the form with <%= inline_code "rails-ujs" %> instead and act on the events it emits to do whatever needs to be done. Great. 
<% end %>

<%= para do %>
  Except that by default we then <%= italic "lose" %> the option of responding to the submission with a redirect. Without Turbolinks-Rails installed, if you try to redirect in response to a <%= inline_code "rails-ujs" %> form submission, nothing will happen... 
<% end %>

<%= para do %>
  What we need for <%= inline_code "rails-ujs" %> to be viable in a non-Turbolinks setup is a way to redirect <%= italic "with Turbo" %> when a <%= italic "non" %>-Turbo ajax form is submitted.
<% end %>

<%= para do %>
  And here it is, <%= link_to "in the Turbo docs", "https://github.com/hotwired/turbo-rails/blob/main/UPGRADING.md#2-replace-the-turbolinks-gem-in-gemfile-with-turbo-rails" %>. A Turbo version of the <%= link_to "Turbolinks-Rails redirect_to method", "https://github.com/turbolinks/turbolinks-rails/blob/master/lib/turbolinks/redirection.rb" %>. Drop this into your ApplicationController, and you can redirect with Turbo even when Turbo didn't submit the form.
<% end %>

<%= subtitle do %>
  Conclusions...
<% end %>

<%= para do %>
  I don’t know how many others are or will be asking themselves <%= link_to "the question", "#the-question" %> I found <%= italic "myself" %> asking, and I haven't found a definitive answer to that question anyway... But hopefully I have explained a few approaches that might help as we adapt to Rails without Turbolinks and without <%= inline_code "rails-ujs" %>.
<% end %>

<%= para do %>
  I'll finish with a bit of practical advice, because something that <%= italic "has" %> become clear as I've tried out these approaches is a way to make the leap to Turbo a bit calmer and more gradual. 
<% end %>

<%= para do %>
  If your existing application submits <%= inline_code "remote: true" %> forms, there's no need to rewrite them all straight away. Let <%= inline_code "rails-ujs" %> continue intercepting the submissions. Let it continue emitting the convenient <%= inline_code "ajax:error" %> and <%= inline_code "ajax:success" %> hooks. Start by letting Turbo take over the <%= italic "other" %> forms: Turbo will seamlessly<sup><%= link_to "3", "#note-3" %></sup> turn them into ajax submissions and handle them without a full page load. <%= italic "Then" %> consider each 'remote' form individually, either removing <%= inline_code "remote: true" %> and refactoring to deliver the necessary behaviour with Turbo, or keeping <%= inline_code "remote: true" %>, or using <%= italic "neither" %> <%= inline_code "rails-ujs" %> nor Turbo.
<% end %>

<%= para extra_class: "mb-8" do %>
  Thanks for reading, and feel free to get in touch with me <%= link_to "@olliedoodleday", "https://twitter.com/olliedoodleday" %>. 👋
<% end %>

<%= line %>

<%= para extra_class: "mt-4" do %>
  <sup id="note-1">1</sup> Similarly, after submitting the form, we call this <%= link_to "complete", "https://stripe.com/docs/js/payment_request/events/on_paymentmethod" %> function to finish processing an Apple or Google pay purchase. The argument we pass to <%= inline_code "complete" %> depends on the server response.
<% end %>

<%= para do %>
  <sup id="note-2">2</sup> There is a separate event (<%= inline_code "turbo:submitEnd" %>) on the form element, but you cannot use it to prevent Turbo doing what it wants to do with the response, and you cannot even read the response, because Turbo has already read it.
<% end %>

<%= para do %>
  <sup id="note-3">3</sup> Assuming the response is either a redirect or <%= inline_code "html" %> with a 4XX or 5XX status.
<% end %>